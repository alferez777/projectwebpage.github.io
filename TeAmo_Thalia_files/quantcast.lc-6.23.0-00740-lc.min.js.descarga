document.addEventListener("DOMContentLoaded", function (event) {
  window.__tcfapi("addEventListener", 2, function (tcData, listenerSuccess) {
    console.log("makeStub -> listenerSuccess", listenerSuccess)
    console.log("makeStub -> tcData", tcData)
    console.log("makeStub -> window.digitalDataLayer", window.digitalDataLayer)
    if (listenerSuccess && tcData.eventStatus === "tcloaded") {
      console.log("makeStub -> tcData.eventStatus", tcData.eventStatus)
      console.log("makeStub -> window.digitalDataLayer", window.digitalDataLayer)
      console.log("makeStub -> window.dataLayer", window.dataLayer)
    }
    if (listenerSuccess && tcData.eventStatus === "useractioncomplete") {
      console.log("makeStub -> tcData eventStatus", tcData.eventStatus)
      console.log("makeStub -> useractioncomplete!!!!!")
      if (!tcData.gdprApplies) {
        console.log("makeStub -> !tcData.gdprApplies")
        window._satellite.setVar("CC-Analyticsconsent", true)
        window._satellite.setVar("CC-CSconsent", true)
        window._satellite.setVar("CC-COconsent", true)
        window._satellite.setVar("CC-DYconsent", true)
        if (!!window.dtrum) {
          window.dtrum.enable()
        }
        var event = new CustomEvent("event-view-end")
        var obj = document.querySelector("body")
        obj.dispatchEvent(event)
      } else {
        /**
         * IAB vendors.
         */
        var vendor_consent_id_list = []
        var vendor_consent_id_list_str = ""
        Object.keys(tcData.vendor.consents).forEach(function (key) {
          if (tcData.vendor.consents[key]) {
            vendor_consent_id_list.push(key)
          }
        })
        vendor_consent_id_list_str = vendor_consent_id_list.join()
        console.log(" makeStub -> vendor_consent_id_list", tcData.vendor.consents)
        console.log(" makeStub -> window._satellite", window._satellite)
        window.__tcfapi("getNonIABVendorConsents", 2, function (nonIabConsent, nonIabSuccess) {
          console.log(" makeStub -> nonIabVendorConsents !!!")
          console.log(" makeStub -> nonIabConsent", nonIabConsent)
          console.log(" makeStub -> nonIabConsent.nonIabVendorConsents", nonIabConsent.nonIabVendorConsents)
          console.log(" makeStub -> nonIabSuccess", nonIabSuccess)
          var CSconsent = false
          var analyticsConsent = false
          var COconsent = false
          var DYconsent = false

          const satelliteSetting = () => {
            console.log("customVars -> CSconsent", CSconsent)
            console.log("customVars -> analyticsConsent", analyticsConsent)
            console.log("customVars -> COconsent", COconsent)
            console.log("customVars -> DYconsent", DYconsent)
            window._satellite.setVar("CC-Analyticsconsent", analyticsConsent)
            window._satellite.setVar("CC-CSconsent", CSconsent)
            window._satellite.setVar("CC-COconsent", COconsent)
            window._satellite.setVar("CC-DYconsent", DYconsent)
            if (!!window.dtrum) {
              window.dtrum[DYconsent ? "enable" : "disable"]()
            }

            console.log("satellite track Analytics")
            var event = new CustomEvent("event-view-end")
            var obj = document.querySelector("body")
            obj.dispatchEvent(event)
          }

          if (nonIabSuccess && nonIabConsent.nonIabVendorConsents) {
            var nonIABVendorsIds = nonIabConsent.nonIabVendorConsents
            console.log("makeStub -> nonIABVendorsIds", nonIABVendorsIds)

            if (nonIABVendorsIds != undefined) {
              CSconsent = nonIABVendorsIds[1]
              analyticsConsent = nonIABVendorsIds[3]
              COconsent = nonIABVendorsIds[7]
              DYconsent = nonIABVendorsIds[5]

              if (window._satellite) {
                satelliteSetting()
              } else {
                const interval = window.setInterval(() => {
                  if (window._satellite) {
                    satelliteSetting()

                    clearInterval(interval)
                  }
                }, 300)
              }
            }
          }
        })
      }
    }
  })
})
